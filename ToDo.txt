hacer una aplicacion de control de gastos

posiblemente descartar esta de turnos para hacer uno de reserva de habitacion hoteles
aunque esto puede ser complejo porque tiene que incluir pagos

el sistema podria ser una plataforma de distintos deportes donde se ofrecen distintas cosas por ej reserva de canchas para alquilar, o reserva de clases de x disciplina con un profesor etc
	- esto podria tener un chat con websocket

MENTALIZARME
ESTUDIAR PARA PODER CAMBIAR DE TRABAJO !!

- buscar sobre JavaDoc
- implementar login (seguridad) /// LISTO
- falta el logout // LISTO
- como guardar el jwt en cookies desde el servidor
- agregar OAuth2


en algun otro proyecto se puede integrar websocket
	INTEGRAR WEB SOCKET


back end EspacioActivo anotaciones




TO-DO:


		


- roles, que hace cada rol: 

	>> DOING THIS HIGH PRIORITY <<
	
	Service-Provider:
		crea 
		     > actividades  >>> LISTO <<< ????? no lo habia probado todavia.... o al menos no el controlador en postman  >> listo ahora si <<
										hacer excepciones para todos los campos en caso de que esten vacios >> listo <<
		     
			 > appointments >> LISTO <<
									validaciones: . date -> tiene que ser mayor a hoy >> listo <<
												  . time -> tiene que estar dentro de la franja horaria permitida >> listo <<
												  . max-people -> tiene que ser mayor a 0 y menor a 25 >> listo <<
												  . activityId > no puede ser empty y tiene que ser una que el service-provider creo >> listo <<
												  . stateId > no puede ser empty >> listo<< > tiene que existir >> esto ya estaba en el create << >> listo <<
								
						
	   	     
			 > solicitud de disciplinas >> Listo y validado EXCEPTO la parte en la que es atendida por un admin <<

				{


					- el proveedor de servicios tiene que poder solicitar crear una nueva disciplina >> listo y validado 19/05 <<
						tiene que tener el rol de service-provider >> listo y validado 19/05 <<
					
					primer warning: si tiene mismo nombre y mismo tipo no debe dejar >> LISTO << >> listo y validado 19/05 <<
					
					ya esta diagramado, el usuario va a CREAR una solicitud para crear una nueva disciplina >> LISTO <<  >> listo y validado 19/05 <<
						esta solicitud va a tener dentro una disciplina, sin relacion con las disciplinas existentes ya que seria una nueva. >> LISTO << >> listo y validado 19/05 <<
							el usuario que la envia  (1 usuario puede enviar n solicitudes) >> LISTO << >> listo y validado 19/05 <<
							y un estado (en espera, aprobado, rechazado) >> LISTO << >>>> el estado se setea default al crear la solicitud en ON_HOLD <<<< >> listo y validado 19/05 <<

						la solicitud tiene que tener una disciplina valida, esto se tiene que validar >> LISTO << >> listo y validado 19/05 <<

						implementar que si ya hay una solicitud con el mismo nombre y el mismo tipo, lanzar una excepcion especifica >> listo y validado 19/05 <<


							>>>>>>>> todo lo de aca abajo esta ToDo <<<<<<<<< <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
						esta solicitud va a ser atendida por un ADMIN que la aprobara o rechazara
						en caso de ser aprobada, se dara de alta una nueva disciplina
						en caso de ser rechazada la solicitud pasara a estar rechazada y no se hara nada
							en ambos casos (aprobada o rechazada) se le enviara un mensaje al usuario
								aca capaz sea necesario integrar websocket

					el usuario puede:
						crear una solicitud  >> LISTO << >> listo y validado 19/05 <<

				}



		lee
		    > SUS actividades >>> LISTO <<<
			
		    > SUS appointments >> LISTO <<
			
		    > SUS solicitudes 
				leer SUS solicitudes >> listo y validado 19/05 <<
							solo puede leer SUS solicirudes


		actualiza
			> SUS actividades 	>>> LISTO <<<
			{
				(deberia solamente poder actualizar precio y address, testear esto)
					se testeo que puede actualizar mandando solo el precio y el id y anda bien
					tambien mandar un id a una actividad que no le pertenece
					se probo modificando address y precio, hay que mandarle la id y modifica la que ya existe
					se probo mandando solo address y ok
					se probo sin precio ni address y exception ok
					probar si tiene 0 actividades >> ok <<
					>> solo deberia poder actualizar las actividades que le pertenecen << >> ok <<
					
					>> agregar todas estas pruebas al postman, quiza cuando haga los test <<
			}			
			
			>> SUS appointments >>>> en teoria ya esta todo hecho y validado , 19/5 3PM <<<
			
			{
				solo puede modificarlo si el appointment es de el >> listo <<		 >> validado <<
				no puede modificar un appointment expirado >> listo <<				 >> validado <<
				
				>>>>>>>>>>>>>> >> AGREGAR TODOS ESTOS CASOS EN POSTMAN , HACERLO TB CON IS_FULL << <<<<<<<<<<<<<< >> listo en teoria <<
				
				el state_id puede cambiar a unavailable >> listo <<
						excepcion si envia un estado invalido >> listo << >> validado <<
						si cambia a unavailable y hay reservas asociadas, todas tienen que cambiar a cancelado >> listo <<  >> validado <<
							hay que ir al service de reserva y traer todas las reservas con este appointmentId >> listo << 
								todas las que no esten canceladas hay que cancelarlas >> listo <<
									>> esto tiene que ir en una flag, no debe ser asi siempre << >> listo << >> validado <<
										yo puedo querer deshabilitar un turno y mantener las reservas >> listo << >> validado <<
							se podria hacer un nuevo campo >> listo << 
								que declare quien es el que cancelo la reserva (proveedor o customer) >> listo << >> validado <<
									hay que cambiar entidad, dto, mapperconfig , parece que no requiere mapperconfig >> listo <<  >> validado <<
						el totalReserves y el isFull se reinicia cuando cancelan las reservas >> listo << >> validado <<
						el sistema me va a permitir hacer una modificacion si estoy enviando el mismo estado que la entidad >> listo << >> validado <<
							persistida ya tiene, solo si envio en true la flag de cancelar reservas y el turno tiene reservas activas >> listo << >> validado <<
							esto es para poder cancelar reservas despues en un turno que ya esta deshabilitado pero con reservas activas >> listo << >> validado <<
							tambien puedo no enviar informacion de estado y mandar la flag de cancelar reservas en true >> listo << >> validado <<
								si hay reservas para cancelar, el sistema lo va aceptar >> listo << >> validado <<
						si envio el campo 'cancelAllReserves' en true y no hay reservas para cancelar envia una excepcion. >> listo << >> validado <<
							
				el state_id puede cambiar a available desde unavailable >> listo << >> validado <<
					si la fecha es >= a maniana  >> listo << >> validado <<
					las reservas que tenia quedan canceladas >> listo << >> validado <<
					el totalReserves se re-inicializa en 0 y el isFull queda en false >> listo << >> validado <<
				
				date puede ser actualizada siempre y cuando sea igual o posterior a maniana y diferente al actual >> listo << >> validado <<
				

				is_full puede ser modificado, si esta en false, ignorando el max_people >> listo << >> validado <<
						si pasa de no estar lleno, a estar lleno, tambien tiene que cambiar de estado a UNAVAILABLE. >> listo << >> validado <<
							si el request state es Unavailable lo deja asi, si esta null le setea UNAVAILABLE >> listo << >> validado <<
							si es Available, lanza una excepcion >> listo << >> validado <<
					
				si intento modificar un turno que ya esta lleno  >> listo << >> validado <<
				aca tendria que validar si realmente esta lleno. >> listo << >> validado <<
						puede ser que el turno este lleno pero le quiero aumentar el maxPeople >> listo << >> validado <<
						ahi tambien tendria que cambiar el estado, si esta unavailable, a Available >> listo << >> validado <<
							si estoy mandando un estado null, o un estado Available.  >> listo << >> validado <<
							Si estoy enviando un estado Unavailable, no tiene sentido sacarle el full >> listo << >> validado <<
							si quiero setear un turno que estaba full a no full, tengo que, o enviar un max-people mayor al total de reservas >> listo << >> validado <<
							o el turno ya tiene que tener un max-people default que sea mayor al total de reservas >> listo << >> validado <<
						ahi podria cambiar tambien el isFull >> listo << >> validado <<
									
									
					
					
						>> validado 19/05 3 pm <<
				max_people puede ser modificado siempre y cuando el solicitado sea mayor o igual a su total de reservas >> listo << >> validado 19/5 3PM <<
												si es igual al total de reservas, el is_full va a quedar en true >> listo << >> validado 19/5 3PM <<
													si el isfull queda en true, va a cambiar de estado seguramente >> listo << >> validado 19/5 3PM <<
													de available a unavailable >> listo << >> validado 19/5 3PM <<
												tiene que tener ademas las validaciones de > 0 y < 25 >> listo << >> validado 19/5 3PM <<
												si el turno estaba full y se quiere aumentar el max_people >> listo <<  >> validado 19/5 3PM <<
													tiene que cambiar a no full >> listo <<   >> validado 19/5 3PM <<
														si cambia a no full, probablemente tenga que cambiar su estado >> listo <<   >> validado 19/5 3PM <<
															de unavailable a available >> listo <<   >> validado 19/5 3PM <<
															
													si el turno estaba full, y se envia un aumento del max people >> listo << >>>> probar esto <<<< >> validado 19/5 3PM <<
													quedando de tal forma que max people > totalReserves  >> validado 19/5 3PM <<
														 y envian full en true. lanzaria una excepcion porque no tiene sentido  >> listo << >> validado 19/5 3PM <<
														 							
				el time puede ser modificado siempre y cuando este dentro de la franja horaria habilitada >> listo <<
				el total_reserves no puede ser modificado >> listo << >> validado <<
				puede cambiar el activity id solo si el que envia es igual a alguno que quien lo envia tenga creado >> listo <<
				
				
			}


			>> SUS solicitudes >> listo << >> validado << (faltaria agregar algunos datos para validar excepciones)
			{
				modificar SUS solicitudes
					solo si son de el >>> listo <<< >> Validado <<
					solo si estan en estado ON_HOLD >>> listo <<< >> Validado <<

					podra modificar solo el nombre y el tipo de la disciplina solicitada >> listo << >> Validado <<
						y se haran las mismas validaciones que se hicieron al intentar registrarla >> listo << >> Validado <<
							no se puede crear una request con mismo nombre y tipo a una que ya existe >> LISTO << >> Validado <<
							no se puede crear una request con una disciplina que no sea valida >>> LISTO <<< >> Validado <<
			}
						
						



		elimina
			> SUS actividades >> LISTO <<
		 		verificar las dependencias >> LISTO << el user queda ok y el address se borra

					Y QUE PASA CON LOS APPOINTMENT ????? AL ELIMINAR UN ACTIVITY ??? 

						>>>>>>>>>> lo que voy a resolver aca por ahora, es que el service provider, asi como no puede eliminar los appointment
											tampoco podra eliminar las actividades <<<<<<<<<
											habria que pensarlo mas despues

			>> SUS appointments
						un service-provider no puede eliminar appointments, puede setearlos como unavailable y cancelar las reservas.
					
			>> SUS Solicitudes
										>> listo << >> validado <<
				eliminar SUS solicitudes
					solo si estan en estado ON_HOLD >> listo << >> validado <<
					y solo si son de el >> listo << >> validado <<

			
			
			
			
		>>>>>>>>>>>>>>>>>>>>>>>>> tambien puede cancelar reservas individualmente <<<<<<<<<<<<<<<<<<<<<<<<<<<
			
		que interaccion tiene con las reservas a sus appointments?
			puede cancelarlas, y una vez que la cancela no lo puede revertir
				si la cancela, hay que actualizar el "is full" y el totalReserves

	Customer:

		crea
			> solicitud para ser un service provider
			> reservas

		lee

		actualiza

		elimina


	Admin:

		crea

		lee

		actualiza
			>> atiende solicitudes para crear nuevas disciplinas, las aprueba o las rechaza <<
				si las aprueba tiene que dar de alta una nueva disciplina y cambiar el estado de la solicitud
				si la rechaza cambia el estado de la solicitud
					ambas cosas podrian disparar una notificacion al usuario que hizo la solicitud

		elimina


no olvidar q un usuario puede pedir convertirse e. service provider

el video puede ser atraves de una presentación


- el tema del total reserves , isFull y tal, se volvio una dependencia, habria que centralizarlo en un solo lugar

- request discipline se puede unificar en el servicio de disciplina  >> esto pense en hacerlo pero decidi que mejor no para tener mas separado el codigo

- validacion por repositorio en el create de AppointmentService para Activity podria cambiar.

- hay que actualizar el securityConfiguration lo que puede acceder un admin quedo en /**

integrar pagos

- Notificaciones:

	https://youtu.be/QNMItUBPxaI
	https://youtu.be/RtFEFElstL4
	https://youtu.be/mqDtfS2quto
	https://youtu.be/wyMAggMz2PE
	https://youtu.be/fZQOy5SucXw


	sucesos que deberian disparar notificaciones:
		
		- hacer una reserva > al usuario y al proveedor
		- cancelar una reserva, ya sea por el usuario o por el proovedor y a ambos
			diferenciar si fue una cancelacion personal o fue porque cambio el estado a unavailable del appointment
		- si un appointment llega a estar full > al provedor
		- si el appointment cambia a expirado > al provedor
		
- websocket
	chat entre cliente y service-provider
	tmb se podria usar para las notifs



- JwtService -> expirationTime
- token, que lo borre en vez de marcarlo como log out

- SecurityConfiguration , hay que arreglarlo			>> A MEDIAS <<
	quedo comentado el permitAll() hay que chequearlo

- authenticationService al final de todo, y en el registro, comentarios

- authservice, prohibir el registro de usuarios que tengan el mismo email

- hacer todos los controladores junto con la seguridad

- un usuario tiene que pder solicitar converterse en un service-provider


- to do sin prioridad: me quedo una query en IReservationRepository que justamente busca la cantidad de reservas en un turno



- tengo que pensar como va a ser el tema de insertar appointments
	 ya que voy a crear Appointments que no pueden expirar pronto



- ARREGLAR LOS TESTS ACTUALES
	probablemente tengo que re-hacer todo de 0 usando los datos que estan en el script
	revisar cada test y cada uno de los servicios y posibilidades para testear todos los casos y excepciones

- ajustar todos los tests con datos pre-cargados que simulen realidad
- revisar todos los tests unitarios que todo revise todo


- al crear disciplina el usuario tiene que tener el rol que permita crear actividades 
	(esto creo que va a quedar cuando agregue la capa de seguridad)


- todo el tema del token y logout
- manipular el 403 de acceso denegado
- permisos spring https://youtu.be/_NgzlZknoys?si=SgFDTIlur9qdKrwo



- seteo de roles 
- analisar toda la parte de seguridad, tengo bastante trabajo aca

- agregar JavaDoc: configureMapper, Tests, servicios
- agregar comentarios a todo el codigo, revisar clase x clase
- el configureMapper hay que llenarlo de comments para que se entienda
- documentar TODO el codigo





- tests unitarios de todos los servicios
- tests de integracion de todo


- los servicios que trabajan con entidades que tienen relacion con otras entidades, 
	al momento de verificar que la otra entidad existe y tal, 
	podria ir a buscarla y cargarla con el objetivo de pasarle todos los datos y no solo el id.


- testear la eliminacion de cada una de las entidades y verificar si da problemas con sus relaciones


- agregar swagger, documentacion de api, hay data de esto en el pg


- refresh token https://www.youtube.com/watch?v=EsVybSJr7zU&ab_channel=BoualiAli

codigo comentado que tengo que mirar
- entidad Activity en el atributo User y lo mismo pero en Reservation
- ActivityDTO

- tengo que pensar como va a ser el registro de appointments, 
	ya que tiene que ser un registro grupal donde se ingresan muchos appointments de una
	el usuario deberia poder elegir un patron de turnos y setearlo por semana o incluso por mes
		>>> esto puede ser mas para front end <<<


- ajustar arreglar y perfeccionar todos los http en el postman, contemplando los que deben disparar excepciones y los que no





- dockerizar

- el mapper tendria que tener excepciones porque se rompe por completo si algun dato no se manda


- cuando todo este terminado, volver a diagramar todo bien separado por modulos (https://youtu.be/YSEICIDyBP8)
		ese mismo video, me da la sensacion de que podria perfectamente separar todo en micro servicios
		o capaz los microservicios lo dejo para otro proyecto

- diagramar todo, separar por funcionalidades y demas





















DONE:




- activity tiene que exponer fechas disponibles para reservar y de ahi el cliente tiene que servirse, 
osea reservation tiene que crearse a partir de una posibilidad que ya existe y no fue usada, cuando el usuario la usa, esa oportunidad pasa a estar agotada.
	esta hora que ofrece la actividad tiene que tener 3 estados, disponible, ocupada y expirada
	cuando un usuario agarra esa actividad que estaba disponible, pasa a ocupada y nadie mas la puede usar
	
	- actualizar DTOs de Reservation y Activity (LISTO) y el ConfigMapper (LISTO)
		- hay que mapearle Appointment a Reservation, y a Appointment hay que 
			agregarle los maps que ya tenia Reservation y ver si alguno mas

	(LISTO HASTA ACA)

	---------->   cambio de estado   <------------

		cuando la fecha de un Appointment ya paso, su estado tiene que cambiar de Available/Unavailable a Expired
		quedo hecho con el SchedulerConfig que ejecuta una accion en el AppointmentService que ejecuta una query en el repositorio
		y en base al resultado ejecuta otra query de actualizacion
			>>>>> LISTO <<<<<<
		
		hacer un metodo en appointment que traiga solamente los turnos no expirados 
			(>>>LISTO<<<)

		cuando un usuario reserva un appointment este tiene que cambiar de Available a Unavailable
			tiene que estar available si o si, y NO PUEDE estar expirado
				probar pasarle un appointment que no existe al crear una reserva
				agregar nueva excepcion linea 77 appointmentService
					y nueva excepcion en linea 48 ReservationService
			quedo con excepcion si tiene estado no disponible o expirado, probar eso
						>>> LISTO TODO <<<<

		cuando un usuario cancela una reserva que no esta expirada tiene que cambiar de Unavailable a Available
				>>>> LISTO <<<<<


	no puede haber 2 reservas para el mismo appointment (esto creo que ya lo hace automatico)
		(>>>	esto ya quedo resuelto que un appointment solo se puede reservar si esta available <<<)
	
	y tiene que estar available para poder hacerse la reserva (>>LISTO<<)

	la reserva tiene que tener la posibilidad de ser cancelada, solo se puede hacer antes de que el appointment expire, vuelve a estar available
	tambien tiene que tener la posibilidad de asignarle otro appointment siempre y cuando este este disponible
		(>>> lo primero esta listo, lo otro no lo voy a implementar. el usuario tendria que cancelar y hacer una nueva reserva <<<)




- hacer el front en react, usar TS

- excepcion en CRUDMapper (readById) // LISTO

- script de datos, primero va  -->>> LISTO
	Role >  LISTO
	Usuarios > LISTO
	UserRole > LISTO
	Disciplinas > LISTO
	Address > LISTO
	Actividades > LISTO
	AppointmentStates > LISTO 
	Appointments > LISTO
	Reservas > LISTO


((((    - agregar el filtro por cantidad de personas
		 y toda la logica del max_people      )))))


VOY A MOVER EL max_people de ACTIVIDAD A TURNO >>> LISTO <<<

	al momento de ingresar una reserva, 
		se tiene que fijar la cantidad de reservas que existen actualmente asociadas a ese turno
		si tiene max-people 1, al momento que alguien hace una reserva, el turno pasa a no estar disponible.
		si esa actividad a la que esta asociada el turno al que estamos reservando, tiene > 1 en max_people
			hay que hace un conteo de reservas asociadas a ese turno, si la cantidad de reservas es menor 
			al numero en max_people de esa actividad, la reserva va a hacerse efectiva.
			si el numero de conteo de reservas asociadas a ese turno es solamente una unidad inferior al numero de max_people
				el turno tiene que quedar DESHABILITADO ya que entro la ultima reserva disponible segun el maximo de personas
				para esa actividad.
			si el numero de conteo de reservas asociadas a ese turno es mas de una unidad inferior al numero de max_people
				la reserva se va hacer efectiva y VA A CONTINUAR HABILITADA para recibir mas reservas.
		>> LISTO <<
		
		resolverlo con exceptions >> LISTO <<
		

		Test: probar con un AppointmentId que no exista, >> LISTO <<
		      con uno que tenga lleno el max-people >> LISTO <<
		      con uno que le falte 1 para llenar >> LISTO <<
		      con uno que le falte varios para llenar >> LISTO <<
			probar llegar a que quede full, despues cancelar una reserva y volver a intentar >> LISTO <<
			

		((esta misma validacion hay que agregarla cuando un usuario cancela una reserva)) >> LISTO <<
			>>> DOING THIS <<<


- agregar excepcion para que no se pueda crear una disciplina que ya exista >>> LISTO <<<
y otra para que no se pueda actualizar si el tipo no es de los tipos que existen y lo mismo al crear >>> LISTO <<<

- agregar excepcion para que al crear una actividad tiene que tener una disciplina que ya existe, >>> LISTO <<<

- al crear appointment tiene que existir la actividad >>> LISTO <<<
	y el tipo de state tiene que ser valido >>> LISTO <<<


- al crear la reserva tiene que existir el appointment >>> Esto esta listo, tira el 404 en el checkIfIsFullToCreateReservation <<<

- configureMapper , roles en map activity to activityDTO >>> LISTO <<<

- falta agregar una exception en el cancel de reservas, deja cancelar una reserva que ya esta cancelada >> LISTO <<

>> agregar un count de reservas en Appointment <<  ---  >> LISTO <<
		hay que ajustar entidad, dto y datos >> listo <<
		tiene que contar las reservas concretadas y no canceladas >> listo <<
		es decir cuando una reserva se cancela, debe restar un numero a ese total >> listo <<
		cuando una reserva se crea debe aumentar un numero a ese total >> listo <<
		el numero empieza en 0 al crear un appointment >> listo <<